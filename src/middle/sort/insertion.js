function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let current = arr[i];
    let j = i - 1;
    
    // Сдвигаем элементы arr[0..i-1], которые больше current,
    // на одну позицию вправо
    while (j >= 0 && arr[j] > current) {
      arr[j + 1] = arr[j];
      j--;
    }
    
    // Вставляем current в правильную позицию
    arr[j + 1] = current;
  }
  return arr;
}

// Пример использования
const array = [64, 34, 25, 1, 12, 22, 11, 2, 9];
console.log("До сортировки:", array);
console.log("После сортировки:", insertionSort(array)); // [1, 2, 9, 11, 12, 22, 25, 34, 64]

// сложность - O(n^2)

// количество сравнений:
// - отсортированный - O(n)
// - случайный - O(n^2)
// - обратный - O(n^2)

// количество перестановок:
// - отсортированный - O(1)
// - случайный - O(n^2)
// - обратный - O(n^2)

// память - O(1)

// особенности: примерно в 2 раза меньше количество сравнений, чем у пузырька и выбором + эффективна для небольших массивов или почти отсортированных данных