function radixSort(arr) {
  // Находим максимальное число, чтобы знать количество разрядов
  const maxNum = Math.max(...arr);
  let divisor = 1; // Начинаем с младшего разряда
  
  while (divisor <= maxNum) {
    // Создаем 10 корзин (0-9)
    const buckets = Array.from({ length: 10 }, () => []);
    
    // Распределяем числа по корзинам на основе текущего разряда
    for (const num of arr) {
      const digit = Math.floor((num / divisor) % 10);
      buckets[digit].push(num);
    }
    
    // Собираем числа из корзин обратно в массив
    arr = [].concat(...buckets);
    
    // Переходим к следующему разряду
    divisor *= 10;
  }
  
  return arr;
}

// Пример использования
const array = [642, 34, 25, 1230, 12, 422, 11, 20, 9];
console.log("До сортировки:", array);
console.log("После сортировки:", radixSort(array)); // [9, 11, 12, 20, 25, 34, 422, 642, 1230]

// сложность - O(n * d), где d - число разрядов самого большого числа(чтобы найти нужно O(n))

// количество сравнений:
// - отсортированный - O(n * d)
// - случайный - O(n * d)
// - обратный - O(n * d)

// количество перестановок:
// - отсортированный - O(n * d)
// - случайный - O(n * d)
// - обратный - O(n * d)

// память - O(n + d)
// особенности: нужно, чтобы сортируемые значения имели разряды. для раборы с отрицательными числами, нужно сначала разделить положительные и отрицательные числа на 2 массива