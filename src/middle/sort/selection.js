function selectionSort(array) {
  // Копируем массив, чтобы не изменять исходный
  
  for (let i = 0; i < array.length - 1; i++) {
    // Предполагаем, что минимальный элемент - первый в неотсортированной части
    let minIndex = i;
    
    // Ищем минимальный элемент в неотсортированной части
    for (let j = i + 1; j < array.length; j++) {
      if (array[j] < array[minIndex]) {
        minIndex = j;
      }
    }
    
    // Если нашли элемент меньше текущего, меняем их местами
    if (minIndex !== i) {
      [array[i], array[minIndex]] = [array[minIndex], array[i]]; // деструктурирующее присваивание
    }
  }
  
  return array;
}

// Пример использования
const array = [64, 34, 25, 1, 12, 22, 11, 2, 9];
console.log("До сортировки:", array);
console.log("После сортировки:", selectionSort(array)); // [1, 2, 9, 11, 12, 22, 25, 34, 64]

// сложность - O(n^2)

// количество сравнений:
// - отсортированный - O(n^2)
// - случайный - O(n^2)
// - обратный - O(n^2)

// количество перестановок:
// - отсортированный - O(1)
// - случайный - O(n)
// - обратный - O(n)

// память - O(1)

// особенности: лучше использовать там, где количество операций записи больше 